강윤수 TIL

1. Git강의를 통해 배우고 싶은 것 :
 지난 주차에 팀프로젝트를 할 때 코드를 공유하는 것이 문제점 중 하나였다.
 다른팀원이 짠 코드를 내 코드와 합칠 때 바뀐부분을 찾는 과정에서 시간이 오래걸렸다. 
Git강의를 통해 Git을 능수능란하게 쓰는 법을 익히고, 다음 프로젝트에 적용시켜보고 싶다.
 또 코드와 파일을 정리하는 요령을 스스로 익히고 싶다. 

2. 1주차 내용 정리

 

Git을 사용하면 1. 버전관리가 쉽고, 2. 협업을 할 수 있다!

 

Git과 Github의 차이는? ->
Git은 우리 컴퓨터 내에 있는 프로그램이다. 내가 만든 파일을 commit할 수 있는 프로그램이다.

Github는 클라우드의 개념이다. 내가 짠코드를 공유하고, 다른 개발자들과 소통하는 커뮤니티의 역할도 한다. 팀원과의 협업 또한 여기서 이루어질 수 있다.

 

commit이란 ->
commit은 내가 새로 만들거나 수정한 파일을 git에 올리는 것을 말한다. 카메라가 사진을 찍어 순간포착하듯이 그 시간에 해당파일의 상태를 업로드한다.

 

버전관리 ▶ 프로젝트가 수정, 업데이트되면 그 내역을 저장하고 있는것이다. 누가, 언제, 어떤 부분을 수정했는지 담고있다. 버전관리는 commit을 통해 이루어진다. commit은 시간, commit한 사람, 변경내역(commit massage), commit id를 정보로 담고있고, 현재 상태를 저장해 올리는 것을 말한다. 

 바뀐파일 중 일부만 commit하는 것을 add 혹은 staging이라고 한다.

 개발자들은 코드를 통해 소통을 하기에 잘 정리해서 commit을 하는 것이 중요하다. 수정된 내용에 따라 분류해서 따로 add를 하면 직관적으로 코드를 관리할 수 있다.



원격repo/ local repo ▶ repo는 repository의 약어로, 프로젝트를 의미한다. 개인 프로젝트를 할 때는 local repo를 사용하여 내 repo를 관리해도 되지만, 협업을 하거나 내 코드를 공유할 때는 원격 repo를 이용한다. 내 변경사항을 push해 다른 사람에게 전달하고, 다른 사람이 변경한 사항을 pull로 가져와 작업할 수 있다. 

 원격 repo는 클라우드 서비스라고 생각을 할 수 있다. 원격repo로 정보를 저장하는 것을 push, 가져오는 것을 pull이라고 한다.



원격에는 없고 local에 있는 프로젝트 -> tracking하게 설정한다.

local에는 없고 원격에 있는 프로젝트 -> clone하서 갖고온다. 



** push나 pull을 여러번 하는 것은 직관적으로 정리하는 것을 망치는 것 같다. 잘 살펴본 뒤 정말 필요한 내용만 commit하자!!